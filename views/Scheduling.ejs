<!doctype html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <title>Getting Started with Chart JS with www.chartjs3.com</title>
    <script src="lib/tempusdominus/js/moment.min.js"></script>
    <script src="lib/tempusdominus/js/moment-timezone.min.js"></script>
    
    <style>
      * {
        margin: 0;
        padding: 0;
        font-family: sans-serif;
      }
      .chartMenu {
        width: 100vw;
        height: 40px;
        background: #1A1A1A;
        color: rgba(54, 162, 235, 1);
      }
      .chartMenu p {
        padding: 10px;
        font-size: 20px;
      }
      .chartCard {
        width: 1200px;
        height: calc(100vh - 40px);
        background: rgba(54, 162, 235, 0.2);
        display: flex;
        align-items: center;
        justify-content: center;
      }
      .chartBox {
        width: 1000px;
        padding: 20px;
        border-radius: 20px;
        border: solid 3px rgba(54, 162, 235, 1);
        background: white;
      }
    </style>
  </head>
  <body>
    <script>

        var dataDia = <%- JSON.stringify(scatterData); %>
      
        // console.log(parcelsEFR);
        
        
        
        
        </script>


      <div class="chartBox">
        <canvas id="myChart" class="w-100"></canvas>
      </div>
 
    <!-- <script src="https://cdn.jsdelivr.net/npm/chart.js/dist/chart.min.js"></script> -->
    <script type="text/javascript" src="https://cdn.jsdelivr.net/npm/chart.js/dist/chart.umd.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/chartjs-adapter-date-fns/dist/chartjs-adapter-date-fns.bundle.min.js"></script>
    <script src="lib/chartjs-datalabels.js"></script>
    <script>
    // setup 

    // console.log(dataDia);

    const dataChart = []
    const dataName = []
    var datasets = [] 
    const structures = []

    var borderColor = { 's':'rgba(54, 162, 235, 1)',
                        'b':'rgba(8, 183, 39, 1)',
                        'm':'rgba(80, 79, 80, 1)',
                        'w':'rgba(98, 5, 162, 1)',
                        'f':'rgba(242, 247, 9, 1)',
                        'c':'rgba(255, 0, 9, 1)',
                        'r':'rgba(232, 141, 1, 1)',
  }
    var label = { 's':'Stations',
                        'b':'Bridges',
                        'm':'Movements',
                        'w':'WorkShops',
                        'f':'Systems',
                        'c':'Catenary',
                        'r':'Rails',
  }

  var offset = { 's':-15,
                        'b': -5,
                        'm':'Movements',
                        'w':-5,
                        'f':'Systems',
                        'c':'Catenary',
                        'r':'Rails',
  }


   const stationData= dataDia.filter(element => element['TYPE'] == "b");


  //  console.log(stationData);
  dataDia.map(el => {
    
    const dateSplitFuntion = (dateVar) =>{ 
      dateSplit = dateVar.split("-")
      dateConverted = new Date(`${dateSplit[2]}-${dateSplit[0]}-${dateSplit[1]}`)
      return dateConverted
    }
    structures.push({name: el['structure_spa'], x1: el['pk_ini'], x2: el['pk_end'], y1: dateSplitFuntion(el['ini']), y2: dateSplitFuntion(el['end']), type: el['TYPE'], duration: el['duration']}
    )  
    
     
    
  })  
  
  structures.map (e => {
    
      // dataChart.push([{x: e.x1, y: e.y1 },{ x:e.x2, y:e.y2}])  
      // dataName.push([{name: e.name}])  
      

        // console.log(rotation);

            id1 = (e.y2 > e.y1) ? 0 : 1
            id2 = (e.y2 > e.y1) ? 1 : 0
            // console.log(id1); 

      datasets.push({
          label: label[e.type],
          data: [{x: e.x1, y: e.y1, name: e.name, id:id1, type: e.type, duration: e.duration },{ x:e.x2, y:e.y2, name: e.name, id:id2, type: e.type, duration: e.duration }],
          borderColor: borderColor[e.type],
          showLine: true
      })
    
    





            
          })    
          
     
          console.log(datasets);
 




console.log(dataDia);   
    const data = {
    //   labels: [0, 1000, 2000, 3000, 4500, 5000, 6000],
      datasets: datasets
    };

const successTracker = {

    id: 'successTracker',
    beforeDraw(chart, args, options){
        const { ctx, chartArea: { top, right, bottom, left, width, height }, 
        scales: { x, y } }  = chart
        ctx.save() 
        // console.log(y.getPixelForValue);
        
        // console.log(right); 
        // console.log(left); 
        // console.log(top);
        // console.log(bottom);
        // console.log(width);
        // console.log(height);
        // console.log(bottom);


        ctx.strokeStyle = "blue"
        // ctx.strokeRect(left, y.getPixelForValue(2000000000000), width, 100)  
        var whiteMarch = (new Date('2026-05-25')*1)
        var whiteMarchEnd = (new Date('2026-11-25')*1)

        // console.log(y.getPixelForValue('2021-11-07T00:23:35'));
        ctx.strokeRect(left, y.getPixelForValue(whiteMarch), width, -50)  
        
    }
}

    // config 
    const config = {
      type: 'scatter',
      data,
      options: {
        plugins: {
          tooltip: {
            callbacks: {
              label: (context) =>{
                dateItem = context.raw.y
               
                dateToString = dateItem.toString()
                dateSplit = dateToString.split(" ")

                dateLabel = dateSplit[2] + "-" +  dateSplit[1] + "-" +  dateSplit[3]

                label = (context.raw.id === 0) ? `${context.raw.name} - Initial Date ${dateLabel}` : `${context.raw.name} - Final Date ${dateLabel} - Duration ${context.raw.duration} days`

                
                    // context.raw.y
               console.log(context.raw)  



                return label
              }
            }
          },
          legend: {
            onClick: (evt, legendItem, legend) => {
            // console.log(legend)
            let newVal = !legendItem.hidden;
            legend.chart.data.datasets.forEach(dataset => {
              
              if (dataset.label === legendItem.text) {
                dataset.hidden = newVal
              }
            })
            ;
            legend.chart.update();
            },
            labels: {
            filter: (legendItem, chartData) => {
              let entries = chartData.datasets.map(e => e.label);
              return entries.indexOf(legendItem.text) === legendItem.datasetIndex;
            }
            }
          },
          datalabels: {
            anchor: 'end',
            align: 'right',
                offset: function(context) {
                    var index = context.dataIndex;
                    var value = context.dataset.data[0].type;
                    console.log(value);
                    return offset[context.dataset.data[0].type];
                },
            color: 'black',
        
            formatter: (value, context) => {
              var textLabel = ""
              // console.log(context);
              if (value.id == 0 && (value.type == 'b' || value.type == 'w'  )){
              
                //  console.log(value);
                  textLabel = value.name
               }

               if (value.id == 1 && (value.type == 's')){
              
              //  console.log(value);
                textLabel = value.name
             }
       
         
            return textLabel
          },
          rotation: 90,
          // (context) => {
          //   var rotation = context.dataset.data[0].rotation
          //   // console.log(context);
          //   return rotation
          // },

          font: {
           weight: 'bold',
           size: 8,
         
          }
          
        }
      },
        layout: {
            padding: 10

        },
        scales: {
            // origin Chart
          x: {
            beginAtZero: false,
            title: {
             display: true,
            text: 'Pks From Ramal Metro to Facatativa'
           }

          } , 
          y: {
            type: 'time',
            time: {
                unit: 'month',
            },
            beginAtZero: false,
            min: '2023-03-24 00:00:00',
            max: '2026-12-24 00:00:00',
            
          }
        }
      },
      plugins:[ChartDataLabels, successTracker]
    }
    

    // render init block
    const myChart = new Chart(
      document.getElementById('myChart'),
      config
    );

    // Instantly assign Chart.js version
    // const chartVersion = document.getElementById('chartVersion');
    // chartVersion.innerText = Chart.version;
    </script>

  </body>
</html>